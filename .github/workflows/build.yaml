name: OpenWrt Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: "0 */2 * * *"

concurrency:
  group: openwrt-${{ github.workflow }}-${{ github.ref_type }}-${{ github.ref_name || github.run_id }}
  cancel-in-progress: false

permissions:
  contents: read

defaults:
  run:
    shell: bash

env:
  REMOTE_REPOSITORY: qosmio/openwrt-ipq
  REMOTE_BRANCH: main-nss
  CONFIG_FILE: ax3600.config
  CUSTOM_FILES_PATH: files
  RELEASE_PREFIX: main-nss
  NSS_PACKAGES_REPOSITORY: qosmio/nss-packages
  NSS_PACKAGES_REPOSITORY_BRANCH: NSS-12.5-K6.x
  ARTIFACT_RETENTION_DAYS: 7
  RELEASES_TO_KEEP: 2
  USE_CCACHE: 1

jobs:
  detect-updates:
    name: Detect upstream changes
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      build_required: ${{ steps.diff.outputs.build_required }}
      main_sha: ${{ steps.diff.outputs.main_sha }}
      nss_sha: ${{ steps.diff.outputs.nss_sha }}
    steps:
      - name: Capture upstream commit SHAs
        id: diff
        run: |
          set -euo pipefail

          main_sha=$(gh api "repos/${REMOTE_REPOSITORY}/commits/${REMOTE_BRANCH}" --jq .sha)
          nss_sha=$(gh api "repos/${NSS_PACKAGES_REPOSITORY}/commits/${NSS_PACKAGES_REPOSITORY_BRANCH}" --jq .sha)
          latest_release_body=$(gh release view --repo "${GITHUB_REPOSITORY}" --json body --jq .body 2>/dev/null || echo "")

          build_required=true
          if [[ "${GITHUB_EVENT_NAME}" != "workflow_dispatch" ]] && [[ "$latest_release_body" == *"$main_sha"* ]] && [[ "$latest_release_body" == *"$nss_sha"* ]]; then
            build_required=false
          fi

          {
            printf 'build_required=%s\n' "$build_required"
            printf 'main_sha=%s\n' "$main_sha"
            printf 'nss_sha=%s\n' "$nss_sha"
          } >> "$GITHUB_OUTPUT"

  build:
    name: Build image
    needs: detect-updates
    if: needs.detect-updates.outputs.build_required == 'true'
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    permissions:
      contents: read
      actions: read
    env:
      MAIN_SHA: ${{ needs.detect-updates.outputs.main_sha }}
      NSS_SHA: ${{ needs.detect-updates.outputs.nss_sha }}
    steps:
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential ccache clang flex bison g++ gawk gcc-multilib g++-multilib gettext git \
            libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget

      - name: Checkout OpenWrt source
        uses: actions/checkout@v5
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.MAIN_SHA }}
          fetch-depth: 0
          persist-credentials: false

      - name: Checkout builder assets
        uses: actions/checkout@v5
        with:
          path: builder_repo
          fetch-depth: 0
          persist-credentials: false

      - name: Compute cache fingerprint
        id: cache-key
        run: |
          set -euo pipefail

          config_hash=$(sha256sum "builder_repo/${CONFIG_FILE}" | cut -d' ' -f1)
          patch_hash="none"
          custom_hash="none"

          if compgen -G 'builder_repo/patches/*.patch' >/dev/null; then
            patch_hash=$(find builder_repo/patches -maxdepth 1 -type f -name '*.patch' -print0 \
              | sort -z \
              | xargs -0 sha256sum \
              | sha256sum \
              | cut -d' ' -f1)
          fi

          if [ -d "builder_repo/${CUSTOM_FILES_PATH}" ] && [ -n "$(find "builder_repo/${CUSTOM_FILES_PATH}" -type f -printf '.' -quit)" ]; then
            custom_hash=$(find "builder_repo/${CUSTOM_FILES_PATH}" -type f -print0 \
              | sort -z \
              | xargs -0 sha256sum \
              | sha256sum \
              | cut -d' ' -f1)
          fi

          printf 'config_hash=%s\n' "$config_hash" >> "$GITHUB_OUTPUT"
          printf 'patch_hash=%s\n' "$patch_hash" >> "$GITHUB_OUTPUT"
          printf 'custom_hash=%s\n' "$custom_hash" >> "$GITHUB_OUTPUT"

      - name: Restore downloads cache
        uses: actions/cache@v4
        with:
          path: dl
          key: downloads-${{ runner.os }}-${{ steps.cache-key.outputs.config_hash }}-${{ steps.cache-key.outputs.patch_hash }}-${{ steps.cache-key.outputs.custom_hash }}
          restore-keys: |
            downloads-${{ runner.os }}-${{ steps.cache-key.outputs.config_hash }}-${{ steps.cache-key.outputs.patch_hash }}-
            downloads-${{ runner.os }}-${{ steps.cache-key.outputs.config_hash }}-
            downloads-${{ runner.os }}-

      - name: Restore toolchain cache
        uses: actions/cache@v4
        with:
          path: staging_dir
          key: toolchain-${{ runner.os }}-${{ steps.cache-key.outputs.config_hash }}-${{ env.MAIN_SHA }}
          restore-keys: |
            toolchain-${{ runner.os }}-${{ steps.cache-key.outputs.config_hash }}-
            toolchain-${{ runner.os }}-

      - name: Restore build objects cache
        uses: actions/cache@v4
        with:
          path: build_dir
          key: build-${{ runner.os }}-${{ steps.cache-key.outputs.config_hash }}-${{ steps.cache-key.outputs.patch_hash }}-${{ steps.cache-key.outputs.custom_hash }}-${{ env.MAIN_SHA }}-${{ env.NSS_SHA }}

      - name: Restore ccache data
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ runner.os }}-${{ steps.cache-key.outputs.config_hash }}-${{ steps.cache-key.outputs.patch_hash }}-${{ steps.cache-key.outputs.custom_hash }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ steps.cache-key.outputs.config_hash }}-${{ steps.cache-key.outputs.patch_hash }}-
            ccache-${{ runner.os }}-${{ steps.cache-key.outputs.config_hash }}-
            ccache-${{ runner.os }}-

      - name: Configure ccache
        run: |
          set -euo pipefail
          mkdir -p .ccache
          {
            echo "CCACHE_DIR=${GITHUB_WORKSPACE}/.ccache"
            echo "CCACHE_MAXSIZE=8G"
            echo "CCACHE_COMPRESS=1"
            echo "CCACHE_BASEDIR=${GITHUB_WORKSPACE}"
            echo "CCACHE_NOHASHDIR=1"
            echo "CCACHE_COMPILERCHECK=content"
            echo "CCACHE_SLOPPINESS=time_macros,include_file_mtime"
          } >> "$GITHUB_ENV"

      - name: Pre-build ccache statistics
        run: |
          set -euo pipefail
          ccache -s || true

      - name: Apply custom patches
        run: |
          set -euo pipefail

          if compgen -G 'builder_repo/patches/*.patch' >/dev/null; then
            while IFS= read -r patch; do
              git apply --verbose "$patch"
            done < <(find builder_repo/patches -maxdepth 1 -type f -name '*.patch' | sort)
          fi

      - name: Update and install feeds
        run: |
          set -euo pipefail
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Prepare configuration and custom files
        run: |
          set -euo pipefail

          cp "builder_repo/${CONFIG_FILE}" .config
          make defconfig
          make defconfig

          if [ -d "builder_repo/${CUSTOM_FILES_PATH}" ]; then
            mkdir -p "${CUSTOM_FILES_PATH}"
            rsync -a "builder_repo/${CUSTOM_FILES_PATH}/" "${CUSTOM_FILES_PATH}/"
          fi

      - name: Build firmware
        run: |
          set -euo pipefail

          log_dir=$(mktemp -d)
          export CCACHE_LOGFILE="${log_dir}/ccache.log"
          echo "CCACHE_LOGFILE=${CCACHE_LOGFILE}" >> "$GITHUB_ENV"

          # Derive a stable build timestamp from the checked-out OpenWrt commit.
          main_epoch=$(git show -s --format=%ct "${MAIN_SHA:-HEAD}")
          export SOURCE_DATE_EPOCH="$main_epoch"
          export TZ=UTC
          export LC_ALL=C
          export KBUILD_BUILD_USER=builder
          export KBUILD_BUILD_HOST=github
          export CCACHE_BASEDIR="${CCACHE_BASEDIR:-$GITHUB_WORKSPACE}"

          make download -j"$(nproc)" V=s
          if ! make -j"$(nproc)"; then
            make -j1 V=s
          fi

      - name: ccache statistics
        if: always()
        run: |
          set -euo pipefail
          ccache -s

      - name: Upload ccache log
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: ccache-log-${{ github.run_id }}-${{ github.run_attempt }}
          path: ${{ env.CCACHE_LOGFILE != '' && env.CCACHE_LOGFILE || '/tmp/ccache.log' }}
          if-no-files-found: ignore

      - name: Upload images
        uses: actions/upload-artifact@v5
        with:
          name: ipq807x-images
          path: bin/targets/qualcommax/ipq807x
          if-no-files-found: error
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  release:
    name: Publish release
    needs:
      - detect-updates
      - build
    if: needs.build.result == 'success'
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: ipq807x-images
          path: firmware

      - name: Compute release metadata
        id: meta
        run: |
          set -euo pipefail
          echo "date=$(date -u +%F)" >> "$GITHUB_OUTPUT"
          echo "timestamp=$(date -u +%Y%m%dT%H%M%SZ)" >> "$GITHUB_OUTPUT"

      - name: Publish GitHub release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090
        with:
          files: firmware/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ steps.meta.outputs.timestamp }}-${{ github.run_id }}
          name: OpenWrt Build ${{ steps.meta.outputs.date }}
          body: |
            ## OpenWrt Automated Build
            - Main commit: `${{ needs.detect-updates.outputs.main_sha }}`
            - NSS packages commit: `${{ needs.detect-updates.outputs.nss_sha }}`
            - Trigger: `${{ github.event_name }}`

      - name: Prune old releases
        run: |
          set -euo pipefail
          keep="${RELEASES_TO_KEEP:-2}"
          releases_json=$(gh api "repos/${GITHUB_REPOSITORY}/releases?per_page=100")
          # Delete releases older than the configured retention threshold to keep the feed tidy.
          mapfile -t old_releases < <(jq -r --argjson keep "$keep" '
            map(select(.draft | not))
            | sort_by(.created_at)
            | reverse
            | .[$keep:]
            | .[]
            | "\(.id) \(.tag_name)"' <<<"$releases_json")

          for release in "${old_releases[@]}"; do
            release_id="${release%% *}"
            tag_name="${release#* }"
            gh api -X DELETE "repos/${GITHUB_REPOSITORY}/releases/${release_id}"
            gh api -X DELETE "repos/${GITHUB_REPOSITORY}/git/refs/tags/${tag_name}" 2>/dev/null || true
          done